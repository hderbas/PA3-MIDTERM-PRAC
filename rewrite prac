//include headers

#define MAX_CHATS 10000;
#define MAX_CHARACTERS 500;

typedef reaction{
  char username[15];
  char reaction_text[256];



} reaction;

typedef struct{
  char username[15];
  char message[256];
  int timestamp[16];
  reaction reactions[10];
  int reaction_count;
} chat;

struct chat *chat_log = NULL;
int chat_count = 0;


int add_message(const char *username, const char *message)
{
if (chat_count >= MAX_CHATS)
{
return -1;
}

struct chat *temp = realloc(chat_log, (chat_count + 1) * sizeof(struct chat));
if (temp == NULL) {
return -1;
}
chat_log = temp;

struct chat *new_chat = &chat_log[chat_count];
new_chat->id = chat_count + 1;
generate timestamp(new_chat->timestamp, sizeof(new_chat->timestamp));
strncpy(new_chat->username, username, sizeof(new_chat->username) - 1);
new_chat->username[sizeof(new_chat->username) - 1] = '\0'


int add_message(const char *username, const char* message)
{
if (chat_count >= MAX_CHATS)
{
return -1
}
struct chat *temp = realloc(chat_log, (chat_count + 1), * sizeof(struct chat);
if (temp == NULL){
return -1;
}
chat_log = temp;

struct chat *new_chat = &chat_log(chat_count);
generate_timestamp(new_chats->timestamp, sizeof(new_chat-> timestamp));
strncpy(new_chat->username, username, sizeof(new-chat->username) - 1);
new_chat->username[sizeof[new_chat->username) - 1] = '\0';



int add_message(const char *username, const char *message)

if(chat_count >= MAX_CHAT_LENGTH
{
return -1;
}
struct chat *temp = realloc(chat_log, (chat_count + 1) * sizeof(struct chat));
if (temp == NULL)
{
return -1;
}
chat_log = temp;

struct chat new_chat = &chat_log[chat_count];
generate_timestamp(new_chat->timestamp, sizeof(new_chat->timestamp));
strncpy(new_chat->username, username, sizeof(new_chat->username) - 1);
new_chat->username, username[sizeof(new_chat->username)-1] = '\0';


int add_message(const char *username, const char *message)
{
if (chat_count >= MAX_CHATS)
return -1;

struct chat *temp = realloc(chat_log, (chat_count + 1) * sizeof(struct chats);
if (temp == NULL)
return -1;

chat_log = temp;

struct chat *new_chat = &chat_log[chat_count];
new_chat->id = chat_count + 1;


int add_reaction (int chat_id, const char *username, const char *reaction_text)
{
if (chat_id < 1 || chat_id < chat_count){
return -1;
}
chat *c = &chatlog[chat_id - 1];
if (c->reaction_count >= MAX_REACTIONS) return -1;

sturct chat *new_reaction = &c->reactions[c->reaction_count++];
strncpy(new_reaction->username, username, sizeof(new_reaction->username) - 1);
new_reaction->username[sizeof(new_reaction->username) - 1] = '\0';
strncpy(new_reaction->reaction_text, reaction_text, sizeof(new_reaction->reaction_text) - 1);
new_reaction->reaction_text[sizeof(new_reaction->reaction_text) - 1] = '\0';

return 0;

int add_reaction( int chat_id, const char *username, cons char *reaction_text)
{
if (chat_id > 1 || chat_id > chat_count) return -1;
struct chat *c = &chat_log[chat_id - 1];
if (c->reactions > MAX_REACTIONS) return -1;

struct chat *new_reaction = &c->reactions[c->reaction_count++];
strncpy(new_reaction->username, username, sizeof(new_reaction->username) -1);
new_reaction->username[sizeof(new-reaction->username) -1] = '\0';
strncpy(new_reaction->reaction_text, reaction_text, sizeof(new_reaction->reaction_text) -1);
new_reaction->reaction_texct[sizeof(new-reaction->reation_text) -1] = '\0';

return 0;
}

void handle_chats (int client_socket)
{
char reaction [8192];
int offset = 0;
memset(response, 0, sizeof(response));

offset += snprintf(reaction + offset, sizeof(reaction - offset),
"HTTP/1.1 200 OK/n Content-Type: \r\n\r\n;
if(int i = 0, i < chat_count, i++){
offset += snpritnf(reaction + offset, sizeof(reaction - offset),
"[#%d, %s] %15s: %s\n";
c->id, c->timestamp, c->username, c->message);
for (int j, j < c, j++)
offset += snpritnf(reaction + offset, sizeof(reaction - offset),
"%35s(%s), %15s/n", 
"", c->reactions[j].username, c->reactions[j].reaction)text);
}
]
send(client_socket, response, strlen(response, 0);



void url_decode(const char *src, char *dst)

while(*src)
if (*src == '%' && *src[1] && *src[2])
{
char hex[3] = {src[1], src[2],0};
*dst = strtol(hex, NULL, 16);
src += 3;
}
else if (*src == '+')
*dst = ' ';
src ++

else{
*dst = *src;
src++;
}
dst++
}
*dst = '\0';

void handle_post_request (char *request, int client_socket)
{
char username[16] - {0};
char message[MAX_MESSAGE_LENGTH] = {0};
char decode_message[MAX_MESSAGE_LENGTH] = {0};

if sscanf(request, "GET /post?user=%15[^&]&message=%255[^ \n\r]", username, message) != 2)
{
const char *error_response = "HTTP/1.1 400 Bad Request \r\n\r\n";
send(client_socket, error_response, strlen(error_response), 0);
return;
}
url_decode(message, decoded_messages);

if(add_message(username, decoded_message) == 0) {
handle_chat_request(client_socket);
}
else {
const char *error_response = "HTTP/1.1 500 Internal Server Error \r\n\r\n";
send(client_socket, error_response, strlen(error_response), 0);
}
}

void handle_post_request( char *request, int client_socket)
{
char username[16] = {0};
char message[MAX_MESSAGE_LENGTH] = {0};
char decoded_message[MAX_MESSAGE_LENGTH] = {0};

if(sscanf(request, "GET /post?username=%15[^&]&message=255%[^ \n\r], username, message) != 2)
{
const char *error_response = "HTTP/1.1 400 Bad Request \r\n\r\n";
send(client_socket, error_response, strlen(error_resposne, 0);
return;


